---
name: control
description: |
  The Kubernetes control plane, minus the etcd storage backend.
  The control plane is designed to scale horizontally â€“ that is, it scales
  by deploying more instances.

  This includes the following components:

    - Kubernetes API Server (kube-apiserver)
    - Controller Manager (kube-controller-manager)
    - Scheduler (kube-scheduler)

  The Controller Manager runs controllers.
  Logically, each controller is a separate process, but to reduce
  complexity, they are all compiled into a single binary and run in a single
  process.

  These controllers include:

    - Node Controller: Responsible for noticing and responding when nodes go
      down.

    - Replication Controller: Responsible for maintaining the correct number
      of pods for every replication controller object in the system.

    - Endpoints Controller: Populates the Endpoints object (that is, joins
      Services & Pods).

    - Service Account & Token Controllers: Create default accounts and API
      access tokens for new namespaces.

  The Scheduler watches newly created pods that have no node
  assigned, and selects a node for them to run on.

  Factors taken into account for scheduling decisions include individual and
  collective resource requirements, hardware/software/policy constraints,
  affinity and anti-affinity specifications, data locality, inter-workload
  interference and deadlines.

packages:
  - k8s
  - cfssl

provides:
  - name: api
    type: k8s-apiserver
    properties:
      - cluster.name
      - cluster.ip
      - cluster.dns
      - cluster.domain
      - networks.pods
      - networks.services
      - networks.nodes
      - tls.ca.certificate
      - tls.ca.key
      - cert-manager.ca.certificate
      - cert-manager.ca.key
      - tls.trusted

  - name: cloud-provider
    type: k8s-cloud-provider
    properties:
      - cloud-provider.type
      - cloud-provider.vsphere.ip
      - cloud-provider.vsphere.username
      - cloud-provider.vsphere.password
      - cloud-provider.vsphere.verify-tls
      - cloud-provider.vsphere.datacenter
      - cloud-provider.vsphere.datastore
      - cloud-provider.vsphere.network
      - cloud-provider.vsphere.folder
      - cloud-provider.vsphere.controller-type

consumes:
  - name: etcd
    type: k8s-etcd

templates:
  # certificates
  bin/pre-start:   bin/pre-start
  tls/ca/cert.pem: tls/ca/cert.pem
  tls/ca/key.pem:  tls/ca/key.pem
  tls/sa/cert.pem: tls/sa/cert.pem
  tls/sa/key.pem:  tls/sa/key.pem

  # kube-in-kube
  bin/post-deploy:       bin/post-deploy
  k8s/kube-proxy.yml:    k8s/kube-proxy.yml
  k8s/kube-dns.yml:      k8s/kube-dns.yml
  k8s/cert-manager.yml:  k8s/cert-manager.yml
  k8s/cm-caissuer.yml:   k8s/cm-caissuer.yml
  k8s/dashboard.yml:     k8s/dashboard.yml
  k8s/dashboard-acl.yml: k8s/dashboard-acl.yml
  k8s/bootstrap.yml:     k8s/bootstrap.yml

  # kube-apiserver
  bin/api:              bin/api
  etc/encryption.yml:   etc/encryption.yml
  etc/audit-policy.yml: etc/audit-policy.yml
  etc/cloud-config:     etc/cloud-config

  # kube-controller-manager
  bin/controller-manager: bin/controller-manager

  # kube-scheduler
  bin/scheduler:     bin/scheduler
  etc/scheduler.yml: etc/scheduler.yml

  # required for k8s naming limits.
  # don't forget to add the runtime-config
  dns/aliases.json: dns/aliases.json

properties:
  debug.api:
    default:     false
    description: Enables verbose debugging, suitable for troubleshooting the API Server.

  debug.controller-manager:
    default:     false
    description: Enables verbose debugging, suitable for troubleshooting the Controller Manager.

  debug.scheduler:
    default:     false
    description: Enables verbose debugging, suitable for troubleshooting the Scheduler.

  cluster.name:
    default: my-unnamed-k8s-cluster
    description: |
      The name of this cluster.  Cluster names should be lower case, and may
      only consist of alphanumeric characters, periods (.), hyphens (-) and
      underscores (_).  They must start with a letter.

  cluster.ip:
    default:     ''
    description: A public IP for this cluster, for routing internal traffic.

  cluster.dns:
    default: 10.245.0.2
    description: |
      A Service IP address (in networks.services) to host Core DNS services on.

      This cannot be changed after a successful deployment, because Kubernetes does not
      allow services to change their clusterIP values after initial application of
      the service spec definition.  Choose wisely.

  cluster.domain:
    default:     k8s.(deployment).local
    description: The global DNS suffix for this Kubernetes cluster.

  cluster.proxy-mode:
    default: iptables
    description: |
      The default mode in which `kube-proxy` operates; one of "iptables" or "ipvs".

      In theory, "ipvs" mode will provide more scalability, with higher throughput
      and pod/service density.  However, if you want to run Eirini, or anything else
      which needs to be able to connect to a NodePort from tje kubelet, via the
      127.0.0.1 loopback address, you will need to set this to "iptables".

      If you change this, you will need to delete all kube-proxy pods to get them to
      re-create with the new configuration map (and actually switch modes).

  coalesce:
    default: 300
    description: |
      How long (in seconds) to wait for the Kubernetes cluster to coalesce into
      a functioning unit.

  encryption.key:
    description: A random key to use for encrypting secrets and other data at-rest.

  networks.services:
    default: 10.245.0.0/24
    description: |
      Network CIDR range to use for Service IP allocation.
      This must NOT overlap with networks.pods.

  networks.pods:
    default: 10.244.0.0/16
    description: |
      Network CIDR range to use for Pod IP allocation, across the entire cluster.
      This must be large enough to allocate enough contiguous network ranges (see
      `networks.podmask`) to the number of nodes you have deployed.

      We recommend that you allocate at least a `/21` (~2k IPs across 8 nodes),
      but for large production deployments, a `/16` gives you ~65k IPs across 256 nodes).

      This must NOT overlap with networks.services.

  networks.podmask:
    default: /24
    description: |
      The network mask (i.e. /24) to use for each allocation given out to the
      Kubernetes nodes, which they will use for allocating pod IPs.  This MUST be
      smaller than the netmask chosen for `networks.pods`.

      Very few environment will want to raise this to anything larger than a /24,
      but smaller lab environments may want to use smaller networks (larger masks),
      like `/26` (64 pods per node) or `/28` (16 pods per node).

  networks.nodes:
    description: |
      Network CIDR range that the Kubernetes nodes are deployed into.  This is used
      by the IPVS-mode kube-proxy container to (a) set up the virtual servers for
      NodePort backhaul routing, and (b) to bind the static ports on the node itself
      so that NodePort services can be access at $NODE-IP:$NODE-PORT.

      This is optional.  If you leave it blank, the kube-proxy will bind on ALL
      interfaces.  If you want to specify multiple ranges (or single /32 addresses),
      use a YAML list, instead of a string.

  kubelet.instance-groups:
    default: [node.default]
    description: |
      The names of the BOSH instance_groups (and their BOSH network names) that
      play the role of the Kubernetes runtime kubelet.  This is required for
      wiring up DNS aliases to make both BOSH and Kubernetes happy.  You can
      specify multiple instance_groups names in case you have deployed a
      non-homogenous environment of virtual machine sizes / stemcells / etc.

  images.kube-proxy:
    default: docker.io/huntprod/k8s-bosh-kube-proxy:1.18.5
    description: |
      Where to pull the k8s BOSH release Docker image for kube-proxy.
      If you need to run in an air-gapped network, or just want to inspect the contents
      of your components manually, you can rebuild this image and push it into a private
      registry.

  images.kube-dns:
    default: docker.io/coredns/coredns:1.7.0
    description: |
      Where to pull the k8s BOSH release Docker image for kube-dns (CoreDNS).
      If you need to run in an air-gapped network, or just want to inspect the contents
      of your components manually, you can rebuild this image and push it into a private
      registry.


  apiserver.additional-sans:
    default: []
    description: |
      A list of extra X.509 subject alternate names to add into the API server certificate.

  apiserver.audit-policy:
    description: |
      A YAML audit policy for the Kubernetes API server to use for audit logging.
      Logs will be stord in /var/vcap/sys/log/k8s/control/audit.log.

  apiserver.flags:
    default: []
    description: |
      A list of additional flags to pass to the kube-apiserver daemon.  These flags are
      appended to the command-line after the hard-coded default flags.  Use this option
      with caution; it has the possibility to horribly break your deployment.

      Each item in the list should have a single key (the flag, minus the trailing `--`)
      whose value will be used as the flag value.

  controller-manager.flags:
    default: []
    description: |
      A list of additional flags to pass to the kube-controller-manager.  These flags are
      appended to the command-line after the hard-coded default flags.  Use this option
      with caution; it has the possibility to horribly break your deployment.

      Each item in the list should have a single key (the flag, minus the trailing `--`)
      whose value will be used as the flag value.

  scheduler.flags:
    default: []
    description: |
      A list of additional flags to pass to the kube-scheduler.  These flags are
      appended to the command-line after the hard-coded default flags.  Use this option
      with caution; it has the possibility to horribly break your deployment.

      Each item in the list should have a single key (the flag, minus the trailing `--`)
      whose value will be used as the flag value.

  tls.ca.certificate:
    description: |
      The X.509 Certificate Authority's certificate, in PEM format.

      This certificate must be valid for the following key usages:
        - Digital Signing
        - Key Encipherment
        - Server Auth (Extended)
        - Client Auth (Extended)

  tls.ca.key:
    description: |
      The X.509 Certificate Authority's RSA private key, in PEM format.

      The certificate authority's signing key is necessary to auto-enroll k8s
      nodes (the `kubelet` job, in this BOSH release) in properly validated
      mutual TLS setups.

  tls.sa.certificate:
    description: |
      The X.509 Signing Authority's certificate, in PEM format.

      This certificate is used by the Kubernetes apiserver component to validate
      Bearer tokens generated using the corresponding private key (tls.sa.key),
      by the controller-manager.

      It does not participate in PKI, or mutual TLS, and therefore does not
      have any specific CN / SAN requirements, and need not be signed by any
      Certificate Authority.

  tls.sa.key:
    description: |
      The X.509 Signing Authority's RSA private key, in PEM format.

      This key is used by the controller-manager to sign generated Bearer tokens,
      so that the apiserver can validate them (using tls.sa.certificate).

  tls.trusted:
    default: []
    description: |
      A YAML list of trusted Certificate Authority certificates, in PEM format.
      These will be added to the system bundle so that they will be used as a trust
      source for X.509 PKI by system components like controller-manager and kubelet.

      Note that you do not have to explicitly list `cert-manager.ca.certificate` or
      `tls.ca.certificate`.  This is intended primarily for the use case where you
      cannot (or have not) told the deploying BOSH director about trusted CAs, but
      still need to trust additional CAs on-box.

  cloud-provider.type:
    description: |
      The type of in-tree Kubernetes cloud provider to configure for this cluster.
      The only valid value, currently, is "vsphere".  Leaving this unset will skip
      all cloud-provider configuration.

  cloud-provider.vsphere.ip:
    description: |
      The IP address (or fully-qualified domain name) of the vSphere vCenter.

      This parameter is only used if `cloud-provider.type` is set to "vsphere",
      in which case it is required.

  cloud-provider.vsphere.username:
    description: |
      The username (possible in user@domain format) of the account to log into
      vSphere vCenter.  This account must have appropriate rights and privileges
      to provision volumes (and shadow VMs, by necessity).

      This parameter is only used if `cloud-provider.type` is set to "vsphere",
      in which case it is required.

  cloud-provider.vsphere.password:
    description: |
      The password of the account used to log into vSphere vCenter.

      This parameter is only used if `cloud-provider.type` is set to "vsphere",
      in which case it is required.

  cloud-provider.vsphere.verify-tls:
    default: true
    description: |
      Whether or not to verify the TLS certificate presented by the vSphere
      vCenter, when logging in or interacting with the vCenter API.

      This parameter is only used if `cloud-provider.type` is set to "vsphere".

  cloud-provider.vsphere.datacenter:
    description: |
      The name of the Data Center to provision shadow VMs (and their volumes).

      This parameter is only used if `cloud-provider.type` is set to "vsphere",
      in which case it is required.

  cloud-provider.vsphere.datastore:
    description: |
      The name of the Data Store to provision volumes in.

      This parameter is only used if `cloud-provider.type` is set to "vsphere",
      in which case it is required.

  cloud-provider.vsphere.network:
    description: |
      The name of the Virtual Machine Network to provision shadow VMs to.

      This parameter is only used if `cloud-provider.type` is set to "vsphere",
      in which case it is required.

  cloud-provider.vsphere.folder:
    description: |
      The (slash-separated) path of a folder in the vCenter / datastore in which
      to store shadow VMs and provisioned volumes.  This folder **must** exist
      a priori; Kubernetes will not create it.

      This parameter is only used if `cloud-provider.type` is set to "vsphere",
      in which case it is required.

  cloud-provider.vsphere.controller-type:
    default: pvscsi
    description: |
      The vSphere disk controller type for provisioning disks; almost always set
      to "pvscsi" (the default).

      This parameter is only used if `cloud-provider.type` is set to "vsphere".

  dashboard.enabled:
    default: false
    description: |
      Whether or not to enable the Kubernetes Dashboard UI on this cluster.
      If set to 'true', a service account (with suitable access) will be
      created as part of the deployment of the BOSH release.

  dashboard.cluster-admin:
    default: false
    description: |
      Whether or not to grant the `kubernetes-dashboard` service account
      full access to the Kubernetes cluster (i.e. `cluster-admin` role) or a
      minimal, more controlled set of access permissions.

      Make sure you understand the security implications of enabling this
      before you do so.

  cert-manager.enabled:
    default: false
    description: |
      Whether or not to install cert-manager (https://cert-manager.io/) on the newly
      created cluster.

  cert-manager.timeout:
    default: '60s'
    description: |
      How long to wait for the cert-manager deployments to finish their rollout
      and become healthy (according to the Kubernetes API).

  cert-manager.ca.certificate:
    description: |
      An X.509 Certificate Authority for cert-manager to issuer locally-trusted
      certificates.  This allows webhooks to be deployed with valid certificates,
      without requiring amore heavy-handed approach like ACME / Let's Encrypt, or
      manually specifying trusted CAs in BOSH or the `tls.trusted` property.

  cert-manager.ca.key:
    default: ''
    description: |
      The cert-manager X.509 Certificate Authority's RSA private key, in PEM format.

      If present, this will be put in a Kubernetes secret named `cluster-trusted-ca`,
      under the 'cert-manager' Kubernetes namespace.  This can then be referenced
      from an Issuer object.

  coredns.additional-configuration:
    default: ''
    description: |
      Additional configuration to add to the CoreDNS configuration.  This will be
      properly indented, and must be complete, well-formed, and syntactically valid
      top-level configuration directives.

      For example, to enable host lookup from bosh-DNS aliases,

          properties:
            coredns:
              additional-configuration: |
                hosts bosh. /etc/hosts/or/something

  bootstrap:
    default: ''
    description: |
      An optional YAML configuration (as a string) of Kubernetes resources to apply
      after the cluster has fully deployed.  This is a great place to specify things
      like Ingress controllers, default StorageClass definitions, etc.

# vim:ft=yaml
